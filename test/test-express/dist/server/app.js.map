{"version":3,"sources":["../../server/app.js"],"names":["app","engine","set","path","join","__dirname","use","express","json","reviver","dateReviver","urlencoded","extended","dataApplication","ExpressDataApplication","resolve","secret","getConfiguration","getSourceAt","name","keys","middleware","passport","src","process","cwd","dest","indentedSyntax","sourceMap","static","indexRouter","usersRouter","authenticate","serviceRouter","err","req","res","locals","message","error","get","status","statusCode","render","module","exports"],"mappings":"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","sourcesContent":["\nimport express from 'express';\nimport engine from 'ejs-locals';\nimport path from 'path';\nimport cookieParser from 'cookie-parser';\nimport session from 'express-session';\nimport cookieSession from 'cookie-session';\nimport passport from 'passport';\nimport authRouter from './routes/auth';\nimport logger from 'morgan';\nimport sassMiddleware from 'node-sass-middleware';\nimport { ExpressDataApplication, serviceRouter, dateReviver } from '@themost/express';\nimport indexRouter from './routes/index';\nimport usersRouter from './routes/users';\n\n/**\n * @name Request#context\n * @description Gets an instance of ExpressDataContext class which is going to be used for data operations\n * @type {ExpressDataContext}\n */\n/**\n * @name express.Request#context\n * @description Gets an instance of ExpressDataContext class which is going to be used for data operations\n * @type {ExpressDataContext}\n */\n\n/**\n * Initialize express application\n * @type {Express}\n */\nlet app = express();\n\n// use ejs-locals for all ejs templates\napp.engine('ejs', engine);\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n\napp.use(logger('dev'));\n\napp.use(express.json({\n  reviver: dateReviver\n}));\napp.use(express.urlencoded({ extended: false }));\n\n// @themost/data data application setup\nconst dataApplication = new ExpressDataApplication(path.resolve(__dirname, 'config'));\n// hold data application\napp.set('ExpressDataApplication', dataApplication);\n// use cookie parser\nconst secret = dataApplication.getConfiguration().getSourceAt('settings/crypto/key');\n// use cookie parser\napp.use(cookieParser(secret));\n\n// use session\napp.use(cookieSession({\n  name: 'session',\n  keys: [secret]\n}));\n// use data middleware (register req.context)\napp.use(dataApplication.middleware());\n// use passport\napp.use(authRouter(passport));\n// use sass middleware\napp.use(sassMiddleware({\n  src: path.join(process.cwd(), 'public'),\n  dest: path.join(process.cwd(), 'public'),\n  indentedSyntax: false, // true = .sass and false = .scss\n  sourceMap: true\n}));\n// use static content\napp.use(express.static(path.join(process.cwd(), 'public')));\n\napp.use('/', indexRouter);\n\napp.use('/users', usersRouter);\n// use @themost/express service router\napp.use('/api', passport.authenticate('basic'), serviceRouter);\n\n// error handler\napp.use((err, req, res) => {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n  // render the error page\n  res.status(err.status || err.statusCode || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"],"file":"app.js"}