{"version":3,"sources":["../../../server/routes/auth.js"],"names":["authRouter","passport","use","BasicStrategy","session","passReqToCallback","req","username","password","done","context","model","where","equal","silent","getItem","then","user","id","prepare","and","or","crypto","createHash","update","digest","count","exists","enabled","HttpForbiddenError","catch","err","LocalStrategy","usernameField","passwordField","serializeUser","deserializeUser","router","express","Router","initialize","res","next","name","get","redirect","render","logout","post","authenticate","failureRedirect","module","exports"],"mappings":"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","sourcesContent":["import express from 'express';\nimport {Strategy as LocalStrategy} from 'passport-local';\nimport {BasicStrategy} from 'passport-http';\nimport crypto from 'crypto';\nimport {HttpForbiddenError} from '@themost/common';\n\n/**\n * @param {passport.PassportStatic} passport\n */\nfunction authRouter(passport) {\n    // local strategy example\n    passport.use(new BasicStrategy({\n            session: false,\n            passReqToCallback: true\n        },\n        function(req, username, password, done) {\n            // query users by name\n            return req.context.model('User').where('name').equal(username)\n                .silent()\n                .getItem().then(user => {\n                    // if user cannot be found\n                    if (user == null) {\n                        return done(null, false);\n                    }\n                    // query user credentials by user identifier and password\n                    return req.context.model('UserCredential')\n                        .where('id').equal(user.id).prepare()\n                        .and('userPassword').equal(`{clear}${password}`)\n                        .or('userPassword').equal(`'{md5}'${crypto.createHash('md5').update(password).digest('hex')}`)\n                        .or('userPassword').equal(`'{sha1}'${crypto.createHash('sha1').update(password).digest('hex')}`)\n                        .silent()\n                        .count().then( exists => {\n                            // if ser password is correct\n                            if (exists) {\n                                // validate that user is enabled\n                                if (!user.enabled) {\n                                    return done(new HttpForbiddenError('User account is disabled'));\n                                }\n                                // return user\n                                return done(null, user);\n                            }\n                            return done(null, false);\n                        });\n                }).catch( err => {\n                    return done(err);\n                });\n        }\n    ));\n    \n    passport.use(new LocalStrategy({\n            usernameField: 'username',\n            passwordField: 'password',\n            session: false,\n            passReqToCallback: true\n        },\n        function(req, username, password, done) {\n            // query users by name\n            return req.context.model('User').where('name').equal(username)\n                .silent()\n                .getItem().then(user => {\n                    // if user cannot be found\n                    if (user == null) {\n                        return done(null, false);\n                    }\n                    // query user credentials by user identifier and password\n                    return req.context.model('UserCredential')\n                        .where('id').equal(user.id).prepare()\n                        .and('userPassword').equal(`{clear}${password}`)\n                        .or('userPassword').equal(`'{md5}'${crypto.createHash('md5').update(password).digest('hex')}`)\n                        .or('userPassword').equal(`'{sha1}'${crypto.createHash('sha1').update(password).digest('hex')}`)\n                        .silent()\n                        .count().then( exists => {\n                            // if ser password is correct\n                            if (exists) {\n                                // validate that user is enabled\n                                if (!user.enabled) {\n                                    return done(new HttpForbiddenError('User account is disabled'));\n                                }\n                                // return user\n                                return done(null, user);\n                            }\n                            return done(null, false);\n                        });\n                }).catch( err => {\n                    return done(err);\n                });\n        }\n    ));\n    \n    passport.serializeUser(function(user, done){\n        done(null, user);\n    });\n\n    passport.deserializeUser(function(user, done){\n        done(null, user);\n    });\n    let router = express.Router();\n\n    router.use(passport.initialize());\n\n    router.use(passport.session());\n\n    router.use((req, res, next) => {\n        if (typeof req.user === 'undefined') {\n            req.user = {\n                name: 'anonymous'\n            };\n        }\n        return next();\n    });\n\n    router.get('/login', (req, res) => {\n        if (req.user && req.user.name !== 'anonymous') {\n            res.redirect('/');\n        }\n        res.render('login');\n    });\n\n    router.get('/logout', function(req, res){\n        req.logout();\n        res.redirect('/');\n    });\n\n    router.post('/login',\n        passport.authenticate('local', { failureRedirect: '/login' }),\n        function(req, res) {\n            res.redirect('/');\n        });\n\n    return router;\n}\n\nmodule.exports = authRouter;\n"],"file":"auth.js"}